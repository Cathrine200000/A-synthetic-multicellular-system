from matplotlib import rc  # для вывода русских букв
 
font = {'family': 'Verdana', # для вывода русских букв
        'weight': 'normal'}

import matplotlib.pyplot as plt
from scipy.integrate import odeint
import numpy as np

def R(t):
    return t / 100

def G_dt_pend(alpha_G, L, B_l, n_1, Lm1, B_l1, n_2, y_g, GFP):
    dydt = alpha_G / (1 + (L / B_l) * n_1) + alpha_G / (1 + (Lm1 / B_l1) * n_2) - y_g * GFP
    return dydt

def L_dt_pend(alpha_L, C, B_c, n_3, y_l, L):
    dydt = alpha_L / (1 + (C / B_c) * n_3) - y_l * L
    return dydt

def C_dt_pend(alpha_C, Q_r, R, n_4, y_c, C):
    dydt = alpha_C / (1 + (Q_r / R) * n_4) - y_c * C
    return dydt

def Lm1_dt_pend(alpha_Lm1, Q_r, R, n_5, y_l, Lm1):
    dydt = alpha_Lm1 / (1 + (Q_r / R) ** n_5) - y_l * Lm1
    return dydt


def R_dt(P_r, Lux_R, A, y_R, R):
    return P_r*(Lux_R)**2*A**2-y_R*R

def equation_integration(y, t, alpha_G, B_l, n_1, B_l1, n_2, y_c,
                         alpha_L, B_c, n_3, y_l, alpha_C,
                         Q_r, R, n_4, alpha_Lm1, n_5, y_g, P_r, Lux_R, y_R):

    GFP, L, C, Lm1, A = y
    return [G_dt_pend(alpha_G, L, B_l, n_1, Lm1, B_l1, n_2, y_g, GFP),
            L_dt_pend(alpha_L, C, B_c, n_3, y_l , L),
            C_dt_pend(alpha_C, Q_r, R, n_4, y_c , C),
            Lm1_dt_pend(alpha_Lm1, Q_r, R, n_5, y_l , Lm1),
            R_dt(P_r, Lux_R, A, y_R, R)]

t = np.linspace(0, 10, 100)
GFP = 0
L = 0
C = 1
Lm1 = 2
A = 0.333
y0 = [GFP, L, C, Lm1, A] 

y_R = 0.11
P_r = 0.1111
Lux_R = 0.0222
Q_r = 0.249             #микромоль из статьи
alpha_G = 2             #микромоль в min^-1 из статьи
B_l = 543               #наномоль из статьи
n_1 = 2                 #из статьи
B_l1 = 3.34501          #не из статьи
n_2 = 2                 #из статьи
y_c = 0.116             #в min^-1 из статьи
alpha_L = 1             #микромоль в min^-1 из статьи
B_c = 19                #наномоль из статьи
n_3 = 1                 #из статьи
alpha_C = 1             #микромоль в min^-1 из статьи
Q_r = 0.249             #микромоль из статьи
R = 0.0001              #не из статьи
n_4 = 1                 #из статьи
y_l = 0.018             #в min^-1 из статьи
n_5 = 1                 #из статьи 
alpha_Lm1 = 2           #не из статьи
y_g = 0.404             #в min^-1 из статьи
sol = odeint(equation_integration, y0, t, args=(alpha_G, B_l, n_1, B_l1, n_2, y_c,
                         alpha_L, B_c, n_3, y_l, alpha_C,
                         Q_r, R, n_4, alpha_Lm1, n_5, y_g, P_r, Lux_R, y_R))


def IsMaxMin(min, max, el):
    if el > max:
        max = el
    if el < min:
        min = el
    return [min, max]


def Function(dt, x, y, t_i):
    min = 0.0
    max = 0.0
    itr = len(x)
    Matrix = np.zeros((len(x), y, t_i)) #ищем количество узлов в сетке, n - количество узлов в плоскости, itr - количество матриц
    for y0 in range(0,itr):
        sol = odeint(equation_integration, x[y0], t, args=(alpha_G, B_l, n_1, B_l1, n_2, y_c,
                         alpha_L, B_c, n_3, y_l, alpha_C,
                         Q_r, R, n_4, alpha_Lm1, n_5, y_g, P_r, Lux_R, y_R))
        for j in range(0, 4):
            for k in range(0, 100):
                Matrix[y0][j][k] = sol[k][j]

    for i in range(1, itr):
        Matrix[i][0][0] = Matrix[i - 1][0][0] + dt * (Matrix[i - 1][1][0] + Matrix[i - 1][0][1] -
                                                      2 * Matrix[i - 1][0][0])
        min = IsMaxMin(min, max, Matrix[i][0][0])[0]
        max = IsMaxMin(min, max, Matrix[i][0][0])[1]
        Matrix[i][y - 1][t_i - 1] = Matrix[i - 1][y - 1][t_i - 1] + dt * (Matrix[i - 1][y - 2][t_i - 1]
                                                                      + Matrix[i - 1][y - 1][t_i - 2] - 2 *
                                                                      Matrix[i - 1][y - 1][t_i - 1])
        min = IsMaxMin(min, max, Matrix[i][y - 1][t_i - 1])[0]
        max = IsMaxMin(min, max, Matrix[i][y - 1][t_i - 1])[1]
        Matrix[i][0][t_i - 1] = Matrix[i - 1][0][y - 1] + dt * (Matrix[i - 1][1][y - 1] + Matrix[i - 1][0][t_i - 2]
                                                              - 2 * Matrix[i - 1][0][t_i - 1])
        min = IsMaxMin(min, max, Matrix[i][0][t_i - 1])[0]
        max = IsMaxMin(min, max, Matrix[i][0][t_i - 1])[1]
        Matrix[i][y - 1][0] = Matrix[i - 1][y - 1][0] + dt * (Matrix[i - 1][y - 2][0] + Matrix[i - 1][y - 1][1]
                                                              - 2 * Matrix[i - 1][y - 1][0])
        min = IsMaxMin(min, max, Matrix[i][y - 1][0])[0]
        max = IsMaxMin(min, max, Matrix[i][y - 1][0])[1]
        for j in range(1, t_i - 1):
            Matrix[i][0][j] = Matrix[i - 1][0][j] + dt * (Matrix[i - 1][1][j] + Matrix[i - 1][0][j + 1]
                                                          + Matrix[i - 1][0][j - 1] - 3 * Matrix[i - 1][0][j])
            min = IsMaxMin(min, max, Matrix[i][0][j])[0]
            max = IsMaxMin(min, max, Matrix[i][0][j])[1]
        for j in range(1, y - 1):
            Matrix[i][j][0] = Matrix[i - 1][j][0] + dt * (Matrix[i - 1][j][1] + Matrix[i - 1][j + 1][0]
                                                          + Matrix[i - 1][j - 1][0] - 3 * Matrix[i - 1][j][0])
            min = IsMaxMin(min, max, Matrix[i][j][0])[0]
            max = IsMaxMin(min, max, Matrix[i][j][0])[1]
        for j in range(1, t_i - 1):
            Matrix[i][y - 1][j] = Matrix[i - 1][y - 1][j] + dt * (Matrix[i - 1][y - 2][j] + Matrix[i - 1][y - 1][j + 1]
                                                                  + Matrix[i - 1][y - 1][j - 1] - 3 *
                                                                  Matrix[i - 1][y - 1][j])
            min = IsMaxMin(min, max, Matrix[i][y - 1][j])[0]
            max = IsMaxMin(min, max, Matrix[i][y - 1][j])[1]
        for j in range(1, y - 1):
            Matrix[i][j][t_i - 1] = Matrix[i - 1][j][t_i - 1] + dt * (Matrix[i - 1][j][t_i - 2] + Matrix[i - 1][j + 1][t_i - 1]
                                                                  + Matrix[i - 1][j - 1][t_i - 1] - 3 * Matrix[i - 1][j][
                                                                      t_i - 1])
            min = IsMaxMin(min, max, Matrix[i][j][t_i - 1])[0]
            max = IsMaxMin(min, max, Matrix[i][j][t_i - 1])[1]
        for j in range(1, y - 1):
            for k in range(1, t_i - 1):
                Matrix[i][j][k] = Matrix[i - 1][j][k] + dt * (Matrix[i - 1][j - 1][k] + Matrix[i - 1][j + 1][k]
                                                              + Matrix[i - 1][j][k + 1] + Matrix[i - 1][j][k - 1] - 4 *
                                                              Matrix[i - 1][j][k])
                min = IsMaxMin(min, max, Matrix[i][j][k])[0]
                max = IsMaxMin(min, max, Matrix[i][j][k])[1]
    return Matrix, min, max


dt = 0.1

x = [[GFP, L, C, Lm1, A],[GFP+1, L+1, C+1, Lm1+1, A+1]]
result, mincol, maxcol = Function(dt, x, 5, 100)
print(mincol)
print(maxcol)



for i in range (0,2):
    plt.imshow(result[i], extent = [0, 10, 0, 10], vmin=mincol, vmax=maxcol)
    plt.savefig("res" + str(i)+".png")
